defineWpiUtilProperties()
defineHALProperties()
defineNetworkTablesProperties()
defineWpiLibProperties()

def $implreplace$SetupModel = { project ->
    project.model {
        components {
            $implreplace$(NativeLibrarySpec) {
                targetPlatform 'arm'
                setupDefines(project, binaries)

                binaries.all {
                    tasks.withType(CppCompile) {
                        addUserLinks(linker, targetPlatform, false)
                        addHalLibraryLinks(it, linker, targetPlatform)
                        addWpiUtilLibraryLinks(it, linker, targetPlatform)
                        addNetworkTablesLibraryLinks(it, linker, targetPlatform)
                        addWpilibLibraryLinks(it, linker, targetPlatform)
                    }
                }

                sources {
                    cpp {
                        source {
                            srcDirs = ["${rootDir}/src"]
                            includes = ["**/*.cpp"]
                        }
                        exportedHeaders {
                            srcDirs = ["${rootDir}/include", "${rootDir}/libraries/$driverreplace$/include", "${rootDir}/libraries/$implreplace$/include", wpilibInclude, halInclude, wpiUtilInclude, netTablesInclude]
                            includes = ['**/*.h']
                        }
                        lib project: ':arm:$driverreplace$', library: '$driverreplace$', linkage: 'static'
                    }
                }
            }
        }
    }
}

def $implreplace$ZipTask = { pjt ->
    pjt.ext.$implreplace$Zip = pjt.tasks.create("$implreplace$Zip", Zip) {
        description = 'Creates platform-specific zip of the desktop $implreplace$ libraries.'
        group = 'WPILib'
        destinationDir = releaseDir
        baseName = '$implreplace$-cpp'
        duplicatesStrategy = 'exclude'

        // Copy include files from project
        from(file('include')) {
            into 'include'
        }

        // Copy shared and static binaries from this project
        pjt.model {
            binaries {
                withType(StaticLibraryBinarySpec) { binary ->
                    from(binary.staticLibraryFile) {
                        into 'lib'
                    }
                }
                withType(SharedLibraryBinarySpec) { binary ->
                    from(binary.sharedLibraryFile) {
                        into 'lib'
                    }
                    def debugFile = new File(binary.sharedLibraryFile.absolutePath + ".debug")
                      from(debugFile) {
                          into 'lib'
                      }
                }
            }
        }
        
        /// Copy included driver library headers
        from(file('libraries/$driverreplace$/include')) {
            into 'include'
        }
        
        // Copy included driver library binaries
        from(file('libraries/$driverreplace$/lib')) {
            include '*.so*'
            include '*.a*'
            into 'lib'
        }
        
        // Copy included library headers
        from(file('libraries/$implreplace$/include')) {
            into 'include'
        }
        
        // Copy included library binaries
        from(file('libraries/$implreplace$/lib')) {
            include '*.so*'
            include '*.a*'
            into 'lib'
        }

        // Include the static library file from $driverreplace$ project
        def hal = project(':arm:$driverreplace$')
        hal.model{
            binaries{
                withType(StaticLibraryBinarySpec) { spec ->
                    spec.headerDirs.each {
                        if (!it.toString().contains("build\\wpilib") && !it.toString().contains("build/wpilib") 
                        && !it.toString().contains("arm\\$driverreplace$\\build\\include") && !it.toString().contains("arm/$driverreplace$/build/include") ) {
                          from(it) {
                              into 'include'
                              // We don't want to include any of the .cpp files that are in some of the header directories
                              exclude '**/*.cpp'
                          }
                        }
                    }
                    from(spec.staticLibraryFile) {
                        into 'lib'
                    }
                }
            }
        }
    }

    pjt.build.dependsOn pjt.$implreplace$Zip

    pjt.debugStripSetup()

    pjt.tasks.whenTaskAdded { task ->
        def name = task.name.toLowerCase()
        if (name.contains("$implreplacelower$sharedlibrary") || name.contains("$implreplacelower$staticlibrary")) {
            pjt.$implreplace$Zip.dependsOn task
        }
    }
}

project(':arm:$implreplace$') {
    apply plugin: 'cpp'

    apply from: "${rootDir}/toolchains/arm.gradle"

    $implreplace$SetupModel(project)
    $implreplace$ZipTask(project)
}

task $implreplace$SourceZip(type: Zip) {
    description = 'Creates a sources-zip of the $implreplace$ source files'
    group = 'WPILib'
    destinationDir = releaseDir
    baseName = '$implreplace$'
    classifier = "cppsources"
    duplicatesStrategy = 'exclude'

    from('src') {
        into 'src'
    }

    from('include') {
        into 'include'
    }
}
