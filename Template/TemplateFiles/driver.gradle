defineWpiLibProperties()

def $driverreplace$SetupModel = { project ->
    project.model {
        components {
            $driverreplace$(NativeLibrarySpec) {
                targetPlatform 'arm'
                setupDefines(project, binaries)
                
                

                binaries.all {
                  tasks.withType(CppCompile) {
                    addUserLinks(linker, targetPlatform, false)
                    addWpilibLibraryLinks(it, linker, targetPlatform, false)
                  }
                }

                if (includeJava) {
                    project.setupJniIncludes(binaries)
                }

                sources {
                    cpp {
                        source {
                            srcDirs = ["${rootDir}/$driverreplace$/src"]
                            if (includeJava) {
                                srcDirs "${rootDir}/java/lib"
                            }
                            includes = ["**/*.cpp",]
                        }
                        exportedHeaders {
                            srcDirs = ["${rootDir}/$driverreplace$/include", "${rootDir}/libraries/$driverreplace$/include", wpilibInclude]
                            if (includeJava) {
                                project.jniHeaders$implreplace$.outputs.files.each { file ->
                                    srcDirs file.getPath()
                                }
                            }
                            includes = ['**/*.h']
                        }
                    }
                }
            }
        }
    }
}


def $driverreplace$ZipTask = { pjt ->
    pjt.ext.$driverreplace$Zip = pjt.tasks.create("$driverreplace$Zip", Zip) {
        description = 'Creates platform-specific zip of the desktop $driverreplace$ libraries.'
        group = 'WPILib'
        destinationDir = releaseDir
        baseName = '$implreplace$-driver'
        duplicatesStrategy = 'exclude'

        from(file('$driverreplace$/include')) {
            into 'include'
        }

        if (!pjt.hasProperty('skipJava')) {
            pjt.jniHeaders$implreplace$.outputs.each {
                from(it) {
                    into 'include'
                }
            }
        }
        
        // Copy all library files
        from(file('libraries/$driverreplace$/include')) {
            into 'include'
        }
        
        from(file('libraries/$driverreplace$/lib')) {
          include '*.so*'
          include '*.a*'
          into 'lib'
        }
        

        pjt.model {
            binaries {
                withType(StaticLibraryBinarySpec) { binary ->
                    from(binary.staticLibraryFile) {
                        into 'lib'
                    }
                }
                withType(SharedLibraryBinarySpec) { binary ->
                    from(binary.sharedLibraryFile) {
                        into 'lib'
                    }
                    def debugFile = new File(binary.sharedLibraryFile.absolutePath + ".debug")
                    from(debugFile) {
                      into 'lib'
                    }
                }
            }
        }

        from (halStaticLib) {
            into 'lib'
        }

        from(wpiUtilStaticLib) {
            into 'lib'
        }

        rename ("libHALAthena_shared.so", "libHALAthena.so")
    }

    pjt.build.dependsOn pjt.$driverreplace$Zip
    
    pjt.debugStripSetup()

    pjt.tasks.whenTaskAdded { task ->
        def name = task.name.toLowerCase()
        if (name.contains("$driverreplacelower$sharedlibrary") || name.contains("$driverreplacelower$staticlibrary")) {
            pjt.$driverreplace$Zip.dependsOn task
        }
    }
}

def JavaZipTask = { project ->
  project.ext.JavaZip = project.tasks.create("JavaZip", Zip) {
    description = 'Creates a zip of the Java libraries.'
    group = 'WPILib'
    destinationDir = releaseDir
    baseName = '$implreplace$-java'
    duplicatesStrategy = 'exclude'
    dependsOn { project.jar }
    dependsOn { project.$implreplace$Javadoc }
    
    project.model {
      binaries {
        withType(SharedLibraryBinarySpec) { binary ->
          from(binary.sharedLibraryFile) {
            into '/'
          }
          def debugFile = new File(binary.sharedLibraryFile.absolutePath + ".debug")
          from(debugFile) {
            into '/'
          }
        }
      }
    }
        
    from(file('libraries/$driverreplace$/lib')) {
      include '*.so*'
      into '/'
    }
    
    from(file('libraries/java')) {
      into '/'
    } 
    
    from project.jar.outputs.files {
      include '*.jar'
      include '*.so*'
      into '/'
    }

    from project.$implreplace$Javadoc.outputs.files {
      include '*.jar'
      include '*.so*'
      into '/'
    }
  }
  
  project.build.dependsOn project.JavaZip
  
  project.debugStripSetup()
  
  project.tasks.whenTaskAdded { task ->
        def name = task.name.toLowerCase()
        if (name.contains("testdriversharedlibrary") || name.contains("testdriverstaticlibrary")) {
            project.JavaZip.dependsOn task
        }
    }
}

def JavaSourceZipTask = { project ->
  project.ext.JavaZip = project.tasks.create("JavaSourceZip", Zip) {
    description = 'Creates a zip of the Java sources.'
    group = 'WPILib'
    destinationDir = releaseDir
    baseName = '$implreplace$-javasources'
    duplicatesStrategy = 'exclude'
    dependsOn { project.$implreplace$JavaSource }

    from project.$implreplace$JavaSource.outputs.files {
      include '*.jar'
      include '*.so*'
      into '/'
    }
  }
  
  project.build.dependsOn project.JavaZip
  
  project.debugStripSetup()
  
  project.tasks.whenTaskAdded { task ->
        def name = task.name.toLowerCase()
        if (name.contains("testdriversharedlibrary") || name.contains("testdriverstaticlibrary")) {
            project.JavaZip.dependsOn task
        }
    }
}

project(':arm:$driverreplace$') {
  apply plugin: 'cpp'

  apply from: "${rootDir}/toolchains/arm.gradle"

  if (includeJava) {
    apply from: "${rootDir}/java/java.gradle"
  }

  $driverreplace$SetupModel(project)
  $driverreplace$ZipTask(project)
  JavaZipTask(project)
  JavaSourceZipTask(project)
}

task $driverreplace$SourceZip(type: Zip) {
    description = 'Creates a sources-zip of the $driverreplace$ source files'
    group = 'WPILib'
    destinationDir = releaseDir
    baseName = '$driverreplace$'
    classifier = "driversources"
    duplicatesStrategy = 'exclude'

    from('$driverreplace$/src') {
        into 'src'
    }

    from('$driverreplace$/include') {
        into 'include'
    }

    if (includeJava) {
        from('java/lib') {
            into 'src'
        }
        project(':arm:$driverreplace$').jniHeaders$implreplace$.outputs.each {
            from(it) {
                into 'include'
            }
        }
    }
}
