defineWpiUtilProperties()
defineHALProperties()

def $driverreplace$SetupModel = { project ->
    project.model {
        components {
            $driverreplace$(NativeLibrarySpec) {
                targetPlatform 'arm'
                setupDefines(project, binaries)

                binaries.all {
                    tasks.withType(CppCompile) {
                        addUserLinks(linker, targetPlatform, false)
                        addWpiUtilLibraryLinks(it, linker, targetPlatform)
                        addHalLibraryLinks(it, linker, targetPlatform)
                    }
                }

                if (includeJava) {
                    project.setupJniIncludes(binaries)
                }

                sources {
                    cpp {
                        source {
                            srcDirs = ["${rootDir}/$driverreplace$/src"]
                            if (includeJava) {
                                srcDirs "${rootDir}/java/lib"
                            }
                            includes = ["**/*.cpp",]
                        }
                        exportedHeaders {
                            srcDirs = ["${rootDir}/$driverreplace$/include", "${rootDir}/libraries/$driverreplace$/include", halInclude, wpiUtilInclude]
                            if (includeJava) {
                                project.jniHeaders$implreplace$.outputs.files.each { file ->
                                    srcDirs file.getPath()
                                }
                            }
                            includes = ['**/*.h']
                        }
                    }
                }
            }
        }
    }
}


def $driverreplace$ZipTask = { project ->
    project.ext.$driverreplace$Zip = project.tasks.create("$driverreplace$Zip", Zip) {
        description = 'Creates zip of the desktop $driverreplace$ libraries.'
        group = 'WPILib'
        destinationDir = releaseDir
        baseName = '$implreplace$-driver'
        duplicatesStrategy = 'exclude'

        // Include driver include files
        from(file('$driverreplace$/include')) {
            into 'include'
        }

        // Include JNI headers
        if (!project.hasProperty('skipJava')) {
            project.jniHeaders$implreplace$.outputs.each {
                from(it) {
                    into 'include'
                }
            }
        }
        
        // Copy included library headers
        from(file('libraries/$driverreplace$/include')) {
            into 'include'
        }
        
        // Copy included library binaries
        from(file('libraries/$driverreplace$/lib')) {
            include '*.so*'
            include '*.a*'
            into 'lib'
        }
        
        // Copy static and shared libraries from this project
        project.model {
            binaries {
                withType(StaticLibraryBinarySpec) { binary ->
                    from(binary.staticLibraryFile) {
                        into 'lib'
                    }
                }
                withType(SharedLibraryBinarySpec) { binary ->
                    from(binary.sharedLibraryFile) {
                        into 'lib'
                    }
                    def debugFile = new File(binary.sharedLibraryFile.absolutePath + ".debug")
                    from(debugFile) {
                        into 'lib'
                    }
                }
            }
        }
    }

    project.build.dependsOn project.$driverreplace$Zip
    
    project.debugStripSetup()

    project.tasks.whenTaskAdded { task ->
        def name = task.name.toLowerCase()
        if (name.contains("$driverreplacelower$sharedlibrary") || name.contains("$driverreplacelower$staticlibrary")) {
            project.$driverreplace$Zip.dependsOn task
        }
    }
}

def JavaZipTask = { project ->
    project.ext.JavaZip = project.tasks.create("JavaZip", Zip) {
        description = 'Creates a zip of the Java libraries.'
        group = 'WPILib'
        destinationDir = releaseDir
        baseName = '$implreplace$-java'
        duplicatesStrategy = 'exclude'
        dependsOn { project.jar }
        dependsOn { project.$implreplace$Javadoc }
        
        // Include shared binaries from this project
        project.model {
            binaries {
                withType(SharedLibraryBinarySpec) { binary ->
                    from(binary.sharedLibraryFile) {
                        into '/'
                    }
                    def debugFile = new File(binary.sharedLibraryFile.absolutePath + ".debug")
                    from(debugFile) {
                        into '/'
                    }
                }
            }
        }

        // Copy included library binaries
        from(file('libraries/$driverreplace$/lib')) {
            include '*.so*'
            into '/'
        }
        
        // Copy included java binaries
        from(file('libraries/java')) {
            into '/'
        } 
        
        // Copy project java binary
        from project.jar.outputs.files {
            include '*.jar'
            include '*.so*'
            into '/'
        }

        // Copy project java javadocs
        from project.$implreplace$Javadoc.outputs.files {
            include '*.jar'
            include '*.so*'
            into '/'
        }
    }
    
    project.build.dependsOn project.JavaZip
    
    project.debugStripSetup()
    
    project.tasks.whenTaskAdded { task ->
        def name = task.name.toLowerCase()
        if (name.contains("$driverreplacelower$sharedlibrary") || name.contains("$driverreplacelower$sharedlibrary")) {
            project.JavaZip.dependsOn task
        }
    }
}

def JavaSourceZipTask = { project ->
    project.ext.JavaZip = project.tasks.create("JavaSourceZip", Zip) {
      description = 'Creates a zip of the Java sources.'
      group = 'WPILib'
      destinationDir = releaseDir
      baseName = '$implreplace$-javasources'
      duplicatesStrategy = 'exclude'
      dependsOn { project.$implreplace$JavaSource }

      from project.$implreplace$JavaSource.outputs.files {
          include '*.jar'
          include '*.so*'
          into '/'
      }
    }
    
    project.build.dependsOn project.JavaZip
    
    project.debugStripSetup()
    
    project.tasks.whenTaskAdded { task ->
        def name = task.name.toLowerCase()
        if (name.contains("$driverreplacelower$sharedlibrary") || name.contains("$driverreplacelower$sharedlibrary")) {
            project.JavaZip.dependsOn task
        }
    }
}

project(':arm:$driverreplace$') {
    apply plugin: 'cpp'

    apply from: "${rootDir}/toolchains/arm.gradle"

    if (includeJava) {
        apply from: "${rootDir}/java/java.gradle"
    }

    $driverreplace$SetupModel(project)
    $driverreplace$ZipTask(project)
    JavaZipTask(project)
    JavaSourceZipTask(project)
}

task $driverreplace$SourceZip(type: Zip) {
    description = 'Creates a sources-zip of the $driverreplace$ source files'
    group = 'WPILib'
    destinationDir = releaseDir
    baseName = '$driverreplace$'
    classifier = "driversources"
    duplicatesStrategy = 'exclude'

    from('$driverreplace$/src') {
        into 'src'
    }

    from('$driverreplace$/include') {
        into 'include'
    }

    if (includeJava) {
        from('java/lib') {
            into 'src'
        }
        project(':arm:$driverreplace$').jniHeaders$implreplace$.outputs.each {
            from(it) {
                into 'include'
            }
        }
    }
}
