import org.gradle.internal.os.OperatingSystem

apply plugin: 'java'
apply plugin: 'net.ltgt.errorprone'

repositories {
    mavenCentral()
}

configurations.errorprone {
    resolutionStrategy.force 'com.google.errorprone:error_prone_core:2.0.9'
}

def generatedJNIHeaderLoc = "${buildDir}/include"

sourceSets {
    main {
        java {
            srcDirs = ["${rootDir}/java/src"]
        }
    }
}
    
dependencies {
    compile 'edu.wpi.first.wpilibj:athena:2017.+'
    runtime 'edu.wpi.first.wpilibj:athena:2017.+'
    compile 'edu.wpi.first.wpilib.networktables.java:NetworkTables:+:arm'
    runtime 'edu.wpi.first.wpilib.networktables.java:NetworkTables:+:arm'
    compile fileTree(dir: "${rootDir}/libraries/java", include: ['*.jar'])
    runtime fileTree(dir: "${rootDir}/libraries/java", include: ['*.jar'])
}

jar {
    description = 'Generates $implreplace$ jar, with the JNI shared libraries embedded'
    baseName = '$implreplace$'
    duplicatesStrategy = 'exclude'

    dependsOn { classes }
}

/**
 * Generates the JNI headers
 */
task jniHeaders {
    description = 'Generates JNI headers from edu.wpi.first.wpilibj.$implreplace$.*'
    group = 'WPILib'
    def outputFolder = file(generatedJNIHeaderLoc)
    inputs.files sourceSets.main.output
    outputs.file outputFolder
    doLast {
        outputFolder.mkdirs()
    }
}

clean {
    delete generatedJNIHeaderLoc
}

compileJava {
    options.compilerArgs << '-Xlint:unchecked'
}

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
}

// This creates a lambda that the main build.gradle can access, which sets up the JNI includes for the
// target build platform. This lambda is exposed as a property in the main build.gradle.
ext.setupJniIncludes = { binaries ->
    def platformSpecificIncludeFlag = { loc, cppCompiler ->
        if (OperatingSystem.current().isWindows()) {
            cppCompiler.args "/I$loc"
        } else {
            cppCompiler.args '-I', loc
        }
    }
    binaries.all {
        tasks.withType(CppCompile) {
            cppCompiler.args '-I', file("${rootDir}/java/arm-linux").absolutePath
            cppCompiler.args '-I', file("${rootDir}/java/arm-linux/linux").absolutePath

            jniHeaders$implreplace$.outputs.files.each { file ->
                cppCompiler.args '-I', file.getPath()
            }

            dependsOn jniHeaders$implreplace$
        }
    }
}
